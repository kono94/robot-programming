package de.scr.logic.adjuster;

/**
 * Implementation of a rather basic PID-controller.
 * Uses the factors:
 * Kp - proportional
 * Ki - integral
 * Kd - derivative
 * <p>
 * to calculate the adjustment to get closer to pre defined
 * "setPoint".
 * <p>
 * This implementation uses dt (time) for integral and derivative
 * instead of a set sample size, to get better results on different
 * sample rates.
 * <p>
 * Wikipedia:
 * <p>
 * Term P is proportional to the current value of the SP − PV error e(t).
 * For example, if the error is large and positive, the control output
 * will be proportionately large and positive, taking into account the gain factor "K".
 * Using proportional control alone will result in an error between the
 * etpoint and the actual process value, because it requires an error to
 * generate the proportional response. If there is no error, there is no corrective response.
 * <p>
 * <p>
 * Term I accounts for past values of the SP − PV error and integrates
 * them over time to produce the I term. For example, if there is a residual
 * SP − PV error after the application of proportional control, the integral term seeks
 * to eliminate the residual error by adding a control effect due to the historic
 * cumulative value of the error. When the error is eliminated, the integral term will cease to grow.
 * This will result in the proportional effect diminishing as the error decreases,
 * but this is compensated for by the growing integral effect.
 * <p>
 * Term D is a best estimate of the future trend of the SP − PV error, based on its current rate of change.
 * It is sometimes called "anticipatory control", as it is effectively seeking to reduce the effect
 * of the SP − PV error by exerting a control influence generated by the rate of error change.
 * The more rapid the change, the greater the controlling or dampening effect.
 * <p>
 * <p>
 * Summary:
 * High Kp: Hard to miss or leave the line but will shake left and right.
 * High Ki: Smooth curves but will miss sharp edges or lines in front.
 * High Kd: Will easily detect lines in front but will shake left and right.
 */
public class PIDController implements Adjuster{
    private float Kp = 65f;
    private float Ki = 0.1f;
    private float Kd = 8000f;

    private float setPoint;
    private float previousError = 0f;
    private float integral = 0f;
    private float derivative = 0f;
    private long cycleTime = 0;

    private int dt = 1;
    private int highLimitAdjustment = 100;
    private int lowLimitAdjustment = -100;
    private int maxIntegral = 50;
    private int minIntegral = -50;
    private int msDelay = 100;

    public PIDController(float setPoint) {
        this.setPoint = setPoint;
    }


    @Override
    public int calculateAdjustment(float currentSensorValue) {
        if (this.cycleTime == 0) {
            this.cycleTime = System.currentTimeMillis();
            return 0;
        }

        // Proportional
        float error = setPoint - currentSensorValue;
        // Integral
        integral += Ki * error * dt;
        // Differential
        derivative =  (error - previousError) / dt;

        if (integral > maxIntegral) integral = maxIntegral;
        if (integral < minIntegral) integral = minIntegral;

        int adjustment = (int) (Kp * error + integral + Kd * derivative);
        if (adjustment > highLimitAdjustment) adjustment = highLimitAdjustment;
        if (adjustment < lowLimitAdjustment) adjustment = lowLimitAdjustment;

        previousError = error;
        dt = (int) (System.currentTimeMillis() - this.cycleTime);
        this.cycleTime = System.currentTimeMillis();
        return adjustment;
    }

    public void setSetPoint(float setPoint) {
        this.setPoint = setPoint;
    }

    public void setKp(float kp) {
        Kp = kp;
    }

    public void setKi(float ki) {
        Ki = ki;
    }

    public void setKd(float kd) {
        Kd = kd;
    }

    public void setMaxIntegral(int maxIntegral) {
        this.maxIntegral = maxIntegral;
    }

    public void setMinIntegral(int minIntegral) {
        this.minIntegral = minIntegral;
    }
}
